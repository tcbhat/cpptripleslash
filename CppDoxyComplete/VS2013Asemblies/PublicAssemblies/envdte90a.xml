<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EnvDTE90a</name>
  </assembly>
  <members>
    <member name="T:EnvDTE90a.Breakpoint3">
      <summary>Contains the properties and methods that are used to programmatically control a breakpoint. To use <see cref="T:EnvDTE90a.Debugger4" />, you must add a reference to EnvDTE90a.dll. For native development, you must add a reference to dte90a.tlb.</summary>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Address">
      <summary>Gets the address that a breakpoint is bound to.</summary>
      <returns>For native code, contains a hexadecimal string representation of the breakpoint memory address. For example, 0x5699341.For managed code, contains a metadata-defined function followed by an IL offset. For example, MyApplication.MyFunc+0x000003.Contains an error code if the breakpoint is not bound.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.BreakWhenHit">
      <summary>Gets or sets a value that indicates whether the program breaks when a breakpoint is encountered.</summary>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Children">
      <summary>Gets a collection of all <see cref="T:EnvDTE80.Breakpoint2" /> child objects.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Collection">
      <summary>Gets the collection that contains all the <see cref="T:EnvDTE80.Breakpoint2" /> objects.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Condition">
      <summary>Gets the condition that triggers a breakpoint.</summary>
      <returns>A string that contains the condition that triggers the breakpoint.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.ConditionType">
      <summary>Gets the condition type of the breakpoint, which can be either break when true, or break when it is changed.</summary>
      <returns>One of the <see cref="T:EnvDTE.dbgBreakpointConditionType" /> values.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.CurrentHits">
      <summary>Gets the number of times this breakpoint has been hit during this debugging session.</summary>
      <returns>An integer that contains the number of times a breakpoint is hit during the debugging session.</returns>
    </member>
    <member name="M:EnvDTE90a.Breakpoint3.Delete">
      <summary>Deletes the breakpoint.</summary>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Enabled">
      <summary>Sets or returns the enabled state of the breakpoint.</summary>
      <returns>A Boolean value that is true if the breakpoint is enabled, otherwise false.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.File">
      <summary>Gets the name of the file in which the breakpoint is contained.</summary>
      <returns>A string that contains the name of the file in which the breakpoint is contained.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.FileColumn">
      <summary>Gets the character location within a line in a file where the breakpoint is set.</summary>
      <returns>An integer that contains the character location.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.FileLine">
      <summary>Gets the line within a file where the breakpoint is set.</summary>
      <returns>An integer that contains the source-code line number at which the breakpoint is set.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.FilterBy">
      <summary>Gets or sets a condition at which a breakpoint is set.</summary>
      <returns>A string that contains a condition at which a breakpoint is set.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.FunctionColumnOffset">
      <summary>Gets the column offset from the name of a function breakpoint.</summary>
      <returns>An integer that contains the column offset from the name of a function breakpoint.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.FunctionLineOffset">
      <summary>Gets the line offset from the name of a function breakpoint.</summary>
      <returns>An integer that contains the line offset from the name of a function breakpoint.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.FunctionName">
      <summary>Gets the name of the function that contains the breakpoint.</summary>
      <returns>A string that contains the function name.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.HitCountTarget">
      <summary>Gets the hit count target for any type of breakpoint. It is interpreted based on the hit count type.</summary>
      <returns>An integer that contains the hit count target for any type of breakpoint.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.HitCountType">
      <summary>Gets the hit count type, which describes how to interpret a hit count.</summary>
      <returns>One of the <see cref="T:EnvDTE.dbgHitCountType" /> values.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Language">
      <summary>Gets the name of the programming language that contains the breakpoint.</summary>
      <returns>A string that contains the name of the programming language.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.LocationType">
      <summary>Gets the location type the breakpoint represents.</summary>
      <returns>One of the <see cref="T:EnvDTE.dbgBreakpointLocationType" /> values.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Macro">
      <summary>Gets or sets a breakpoint macro.</summary>
      <returns>A string that contains a breakpoint macro.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Message">
      <summary>Gets or sets a breakpoint message.</summary>
      <returns>A string that contains a breakpoint message.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Name">
      <summary>Sets or returns the name of the breakpoint.</summary>
      <returns>A string that contains the name of the breakpoint.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Parent">
      <summary>Gets the immediate parent object of the breakpoint.</summary>
      <returns>The <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Process">
      <summary>Gets the process in which the breakpoint is set.</summary>
      <returns>A <see cref="T:EnvDTE.Process2" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Program">
      <summary>Gets the executable being managed by this process.</summary>
      <returns>A <see cref="T:EnvDTE.Program" /> object.</returns>
    </member>
    <member name="M:EnvDTE90a.Breakpoint3.ResetHitCount">
      <summary>Resets the breakpoint hit count.</summary>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Tag">
      <summary>Sets or gets a user-defined string that identifyies this breakpoint.</summary>
      <returns>A string that contains the breakpoint tag.</returns>
    </member>
    <member name="P:EnvDTE90a.Breakpoint3.Type">
      <summary>Gets a constant that specifies the type of breakpoint.</summary>
      <returns>One of the <see cref="T:EnvDTE.dbgBreakpointType" /> values.</returns>
    </member>
    <member name="T:EnvDTE90a.Debugger4">
      <summary>
        <see cref="T:EnvDTE90a.Debugger4" /> is used to interrogate and manipulate the state of the debugger and the program being debugged. <see cref="T:EnvDTE90a.Debugger4" /> supersedes the <see cref="T:EnvDTE90.Debugger3" /> interfaces.</summary>
    </member>
    <member name="P:EnvDTE90a.Debugger4.AllBreakpointsLastHit">
      <summary>Gets a collection of bound breakpoints that were last simultaneously hit.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.Break(System.Boolean)">
      <summary>Causes the given process to pause its execution so that its current state can be analyzed.</summary>
      <param name="WaitForBreakMode">Set to true to return only when the debugger has entered break mode. Set to false to break and return immediately. See How to: Break Execution for more information.</param>
    </member>
    <member name="P:EnvDTE90a.Debugger4.BreakpointLastHit">
      <summary>Gets the last breakpoint hit. To get a collection of multiple breakpoints hit simultaneously, see <see cref="P:EnvDTE90a.Debugger4.AllBreakpointsLastHit" />.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoint" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.Breakpoints">
      <summary>Gets a collection of breakpoints.</summary>
      <returns>A <see cref="T:EnvDTE.Breakpoints" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.CurrentMode">
      <summary>Gets the current mode of the debugger within the context of the IDE.</summary>
      <returns>A <see cref="T:EnvDTE.dbgDebugMode" /> value.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.CurrentProcess">
      <summary>Gets or sets the active process.</summary>
      <returns>A <see cref="T:EnvDTE.Process" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.CurrentProgram">
      <summary>Sets or returns the active program.</summary>
      <returns>A <see cref="T:EnvDTE.Program" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.CurrentStackFrame">
      <summary>Gets or sets the current stack frame.</summary>
      <returns>A <see cref="T:EnvDTE.StackFrame" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.CurrentThread">
      <summary>Gets or sets the current thread being debugged.</summary>
      <returns>A <see cref="T:EnvDTE.Thread" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.DebuggedProcesses">
      <summary>Gets the list of processes that are currently being debugged.</summary>
      <returns>A <see cref="T:EnvDTE.Processes" /> collection.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.DetachAll">
      <summary>Detaches from all attached programs.</summary>
    </member>
    <member name="P:EnvDTE90a.Debugger4.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.ExceptionGroups">
      <summary>Gets the exception settings for the debugger. For each exception, these settings determine whether the debugger gives the code a chance to handle the exception before the debugger breaks execution.</summary>
      <returns>A <see cref="T:ExceptionGroups" /> object.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.ExecuteStatement(System.String,System.Int32,System.Boolean)">
      <summary>Executes the specified statement. If the <paramref name="TreatAsExpression" /> flag is true, then the string is interpreted as an expression, and output is sent to the Command Window.</summary>
      <param name="Statement">The statement to execute.</param>
      <param name="Timeout">The timeout period, in milliseconds.</param>
      <param name="TreatAsExpression">true if the string is to be interpreted as an expression; otherwise false.</param>
    </member>
    <member name="P:EnvDTE90a.Debugger4.ForceContinue">
      <summary>Gets or sets a value that determines whether the debugger breaks or continues when a tracepoint or breakpoint finishes executing a macro. The default behavior is set by the user in the dialog box when the tracepoint or breakpoint is created. This property can be used to change the default behavior.</summary>
      <returns>A Boolean that is true if continuation will be forced; otherwise, false.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.GetExpression(System.String,System.Boolean,System.Int32)">
      <summary>Evaluates an expression based on the current stack frame. If the expression can be parsed but not evaluated, an object is returned but does not contain a valid value.</summary>
      <returns>An <see cref="T:EnvDTE.Expression" />.</returns>
      <param name="ExpressionText">The expression text to be evaluated.</param>
      <param name="UseAutoExpandRules">true if the auto-expand rules should be used; otherwise, false.</param>
      <param name="Timeout">The timeout period in milliseconds.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.GetExpression2(System.String,System.Boolean,System.Boolean,System.Int32)">
      <summary>Evaluates an expression based on the current stack frame. If the expression can be parsed but not evaluated, an object is returned but does not contain a valid value. This method is similar to <see cref="M:EnvDTE90.Debugger3.GetExpression(System.String,System.Boolean,System.Int32)" /> but with an additional Boolean parameter, which can be set to true to indicate that the expression is to be evaluated as a statement.</summary>
      <returns>An <see cref="T:EnvDTE.Expression" />.</returns>
      <param name="ExpressionText">The expression text to be evaluated.</param>
      <param name="UseAutoExpandRules">true if the auto-expand rules should be used; otherwise, false.</param>
      <param name="TreatAsStatement">true if the expression text should be treated as a single statement; otherwise, false.</param>
      <param name="Timeout">The timeout period in milliseconds.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.GetExpression3(System.String,EnvDTE.StackFrame,System.Boolean,System.Boolean,System.Boolean,System.Int32)">
      <summary>Evaluates an expression, similar to <see cref="M:EnvDTE90.Debugger2.GetExpression(System.String,System.Boolean,System.Boolean,System.Int32)" />. However, this method allows the caller to specify the stack frame that the evaluation will occur on. It also allows the caller to specify whether automatic evaluation of properties and implicit function calls should occur.</summary>
      <returns>An <see cref="T:EnvDTE.Expression" />.</returns>
      <param name="ExpressionText">The expression text to be evaluated.</param>
      <param name="StackFrame">The stack frame where the expression is to be evaluated. This stack frame can be in any thread of any process that is currently being debugged, if and only if the process is in break mode.</param>
      <param name="UseAutoExpandRules">true if the auto-expand rules should be used; otherwise, false.</param>
      <param name="TreatAsStatement">true if the expression text should be treated as a single statement; otherwise, false.</param>
      <param name="AllowAutoFuncEval">true if automatic evaluation of properties and implicit function calls should be performed; otherwise, false.</param>
      <param name="Timeout">The timeout period in milliseconds.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.GetProcesses(EnvDTE80.Transport,System.String)">
      <summary>Gets an object that represents the processes that are currently connected for debugging on the specified transport.</summary>
      <returns>
        <see cref="T:EnvDTE.Processes" />.</returns>
      <param name="pTransport">A transport type or protocol that is used by the debugger to communicate with the computer that is running the process being debugged. See <see cref="P:EnvDTE90.Debugger3.Transports" />.</param>
      <param name="TransportQualifier">A qualifier for the transport type. See <see cref="P:EnvDTE90.Debugger3.Transports" />.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.Go(System.Boolean)">
      <summary>Starts executing the program from the current statement.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return, the debugger could be in Design, Break, or Run modes. See Execution Control for more information.</param>
    </member>
    <member name="P:EnvDTE90a.Debugger4.HexDisplayMode">
      <summary>Gets or sets a value that indicates whether the expressions are output in hexadecimal or decimal format.</summary>
      <returns>A Boolean that is true if hexadecimal format; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.HexInputMode">
      <summary>Gets or sets a value that indicates whether the expressions are evaluated in hexadecimal or decimal format.</summary>
      <returns>A Boolean that is true if hexadecimal format; otherwise, false.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.Languages">
      <summary>Gets a list of languages that the debugger supports.</summary>
      <returns>A <see cref="T:EnvDTE.Languages" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.LastBreakReason">
      <summary>Gets the last reason that a program was broken. If the program is running, it returns DBG_REASON_NONE.</summary>
      <returns>A <see cref="T:EnvDTE.dbgEventReason" /> value.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.LocalProcesses">
      <summary>Gets the list of processes that are currently running on this computer.</summary>
      <returns>A <see cref="T:EnvDTE.Processes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.OnlyLoadSymbolsManually">
      <summary>Gets a value that determines whether symbols are loaded manually or automatically. The Visual Studio user can determine this setting in the Options dialog box. For more information about how to set this value within Visual Studio, see How to: Specify Symbol Locations and Loading Behavior.</summary>
      <returns>A Boolean that is true if symbols must be loaded manually; false if symbols are loaded automatically.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.Parent">
      <summary>Gets the immediate parent object of the <see cref="T:EnvDTE90a.Debugger4" /> object (<see cref="T:EnvDTE80.DTE2" />).</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.RunToCursor(System.Boolean)">
      <summary>Executes the program to the current position of the source file cursor.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.See Code Stepping Overview for more information.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.SetNextStatement">
      <summary>Sets the next instruction to be executed, according to the cursor position in the current source file.</summary>
    </member>
    <member name="M:EnvDTE90a.Debugger4.SetSymbolSettings(System.String,System.String,System.String,System.Boolean,System.Boolean)">
      <summary>Sets various settings  for the .PDB symbols used by Visual Studio for debugging and forces reloading of all symbols. </summary>
      <param name="SymbolPath">The path to the location of the .PDB symbol files.</param>
      <param name="SymbolPathState">A string that contains one character for each symbol path. If the symbol path is enabled, the character has a value of "1". If the symbol path not enabled, the character can have any other value.</param>
      <param name="SymbolCachePath">The path to the location of the cache used for downloading symbols from a symbol server.</param>
      <param name="OnlyLoadSymbolsManually">Set to true if symbols should only be loaded manually, false if symbols should be loaded automatically.</param>
      <param name="LoadSymbolsNow">Set to true if symbols should be loaded immediately; otherwise false. </param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.StepInto(System.Boolean)">
      <summary>Steps into the next function call, if possible.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run-mode.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.StepOut(System.Boolean)">
      <summary>Steps out of the current function.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.StepOver(System.Boolean)">
      <summary>Steps over the next function call.</summary>
      <param name="WaitForBreakOrEnd">Set to true if this function call should wait until either Break mode or Design mode is entered before returning. Set to false if you want this call to return immediately after causing the debugger to begin execution. Upon return the debugger could be in Design, Break, or Run modes.</param>
    </member>
    <member name="M:EnvDTE90a.Debugger4.Stop(System.Boolean)">
      <summary>Stops debugging and terminates or detaches from all attached processes.</summary>
      <param name="WaitForDesignMode">Set to true if the debugging session should stop only when it reaches Design mode. Set to false if you intend to stop debugging, but you have to perform other tasks in the macro before the debugger enters design mode.</param>
    </member>
    <member name="P:EnvDTE90a.Debugger4.SymbolCachePath">
      <summary>Gets a string that contains the path to the symbols cache used by Visual Studio when you download symbols from a symbols server. You can specify the symbols cache path in the Options dialog box. For more information, see How to: Use a Symbol Server.</summary>
      <returns>A string that contains the path to the symbols cache.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.SymbolPath">
      <summary>Gets a string that contains paths to .PDB symbol files that are used by Visual Studio for debugging. The Visual Studio user can specify symbols paths in the Options dialog box. For more information, see How to: Specify Symbol Locations and Loading Behavior.</summary>
      <returns>A string that contains a semicolon delimited list of paths to the .PDB symbol files.</returns>
    </member>
    <member name="P:EnvDTE90a.Debugger4.SymbolPathState">
      <summary>Gets a string that represents the state of all symbol paths for the .PDB symbol files that are used by Visual Studio for debugging.</summary>
      <returns>A string that contains one character for each symbol path. If the symbol path is enabled, the character has a value of "1". If the symbol path not enabled, the character can have any other value.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.TerminateAll">
      <summary>Terminates all currently running debugging processes.</summary>
    </member>
    <member name="P:EnvDTE90a.Debugger4.Transports">
      <summary>Gets a collection of supported debugging transports.</summary>
      <returns>A <see cref="T:EnvDTE90.Transports" /> collection.</returns>
    </member>
    <member name="M:EnvDTE90a.Debugger4.WriteMinidump(System.String,EnvDTE80.dbgMinidumpOption)">
      <summary>If debugging a program and in Break mode, this function creates a minidump of the current debugging session.</summary>
      <param name="FileName">The file name of the program being debugged.</param>
      <param name="Option">A <see cref="T:EnvDTE90.dbgMinidumpOption" /> constant specifying whether a full or normal dump is written.</param>
    </member>
    <member name="T:EnvDTE90a.Process4">
      <summary>The <see cref="T:EnvDTE90s.Process4" /> object is used to examine and manipulate processes. The <see cref="T:EnvDTE90.Process4" /> object supersedes the <see cref="T:EnvDTE80.Process3" />, <see cref="T:EnvDTE80.Process2" />, and <see cref="T:EnvDTE.Process" /> objects. To use <see cref="T:EnvDTE90a.Debugger4" />, you must add a reference to EnvDTE90a.dll. For native development, you must add a reference to dte90a.tlb.</summary>
    </member>
    <member name="M:EnvDTE90a.Process4.Attach">
      <summary>Causes the debugger to attach this process.</summary>
    </member>
    <member name="M:EnvDTE90a.Process4.Attach2(System.Object)">
      <summary>Similar to <see cref="M:EnvDTE90.Process4.Attach" />, causes the debugger to attach this process, only it allows you to specify an engine or set of engines.</summary>
      <param name="Engines">A <see cref="T:EnvDTE80.Engines" /> collection.</param>
    </member>
    <member name="M:EnvDTE90a.Process4.Break(System.Boolean)">
      <summary>Causes the given process to pause its execution so that its current state can be analyzed.</summary>
      <param name="WaitForBreakMode">Set to true to return only when the debugger has entered break mode. Set to false to break and return immediately. See Breaking Execution for more information.</param>
    </member>
    <member name="P:EnvDTE90a.Process4.Collection">
      <summary>Gets a <see cref="T:EnvDTE.Processes" /> collection that contains the object that supports this property or is contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.Processes" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.CommandLine">
      <summary>Gets the command line that started the program being debugged in Visual Studio. This is a read-only property.</summary>
      <returns>A string that contains the command line.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.CurrentDirectory">
      <summary>Gets the current directory of the process being debugged. This is a read-only property.</summary>
      <returns>String that contains the path to the current directory of the process.</returns>
    </member>
    <member name="M:EnvDTE90a.Process4.Detach(System.Boolean)">
      <summary>Causes the debugger to detach from this process.</summary>
      <param name="WaitForBreakOrEnd">Set to true if the debugging session should stop only when it reaches a break or the end. Set to false if you intend to stop debugging, but you have to perform other tasks in the macro before the debugger breaks or ends. For more information, see Breaking Execution.</param>
    </member>
    <member name="P:EnvDTE90a.Process4.DTE">
      <summary>Gets the top-level extensibility object, the <see cref="T:EnvDTE.DTE" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.EnvironmentVariables">
      <summary>This read-only property returns an array that contains the environment variables defined for the process being debugged.</summary>
      <returns>Safe array of environment variables. Like most arrays used in Visual Studio automation, this array is 1-indexed.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.IsBeingDebugged">
      <summary>Gets whether the current process is being debugged.</summary>
      <returns>true if the process is being debugged, false otherwise.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.Modules">
      <summary>Gets a collection of module objects associated with this process.</summary>
      <returns>A <see cref="T:EnvDTE90.Modules" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.Name">
      <summary>Gets the name of the process.</summary>
      <returns>A string that represents the name of the process.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE80.Process2" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Debugger" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.ProcessID">
      <summary>Gets the ID number assigned to this process.</summary>
      <returns>An <see cref="F:System.Globalization.NumberStyles.Integer" /> value that represents the ID number of the process.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.Programs">
      <summary>Gets a collection of <see cref="T:EnvDTE.Program" /> objects.</summary>
      <returns>A <see cref="T:EnvDTE.Programs" /> collection.</returns>
    </member>
    <member name="M:EnvDTE90a.Process4.Terminate(System.Boolean)">
      <summary>Terminates this process.</summary>
      <param name="WaitForBreakOrEnd">Set to true if the debugging session should stop only when it reaches a break or the end. Set to false if you intend to stop debugging, but you have to perform other tasks in the macro before the debugger breaks or ends. For more information, see Breaking Execution.</param>
    </member>
    <member name="P:EnvDTE90a.Process4.Threads">
      <summary>Gets the threads associated with this process.</summary>
      <returns>A <see cref="T:EnvDTE.Threads" /> collection, each representing a thread in the process.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.Transport">
      <summary>Gets the <see cref="T:EnvDTE80.Transport" /> being used to debug this process.</summary>
      <returns>A <see cref="T:EnvDTE80.Transport" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.TransportQualifier">
      <summary>Gets a computer name or an IP address.</summary>
      <returns>A string that contains a transport qualifier.</returns>
    </member>
    <member name="P:EnvDTE90a.Process4.UserName">
      <summary>Gets the user name associated with this process.</summary>
      <returns>A string that represents the user name.</returns>
    </member>
    <member name="T:EnvDTE90a.StackFrame2">
      <summary>The <see cref="T:EnvDTE90a.StackFrame2" /> object is used to examine and control stack frames. A stack frame is essentially the same as a function call. To use <see cref="T:EnvDTE90a.Debugger4" />, you must add a reference to EnvDTE90a.dll. For native development, you must add a reference to dte90a.tlb.</summary>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Arguments">
      <summary>Gets a collection of expressions that represent the arguments passed to this frame.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Arguments2(System.Boolean)">
      <summary>Gets a collection of expressions that represent the arguments passed to this frame. Allows caller to specify whether properties and implicit function calls should be automatically evaluated.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
      <param name="AllowAutoFuncEval">Determines whether properties and implicit function calls should be automatically evaluated. true means that automatic evaluation will be performed. false means automatic evaluation will not be performed. This parameter affects the returned expressions and any children of those expressions.</param>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Collection">
      <summary>Gets the collection that contains the object that supports this property or that is contained within this code construct.</summary>
      <returns>A <see cref="T:EnvDTE.StackFrames" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Depth">
      <summary>Gets the depth of the frame in the stack. A read-only property.</summary>
      <returns>A value indicating how deeply the frame lies within the stack. This value is 1-based, not 0-based. In other words, the top frame on the stack is number 1, not number 0.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.DTE">
      <summary>Gets the top-level extensibility object.</summary>
      <returns>A <see cref="T:EnvDTE.DTE" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.FileName">
      <summary>Gets the complete file path to the source file that contains this stack frame. A read-only property.</summary>
      <returns>A string that contains the file path.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.FunctionName">
      <summary>Gets the function name of this stack frame.</summary>
      <returns>The function name of this stack frame.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Language">
      <summary>Gets the programming language associated with the stack frame.</summary>
      <returns>A <see cref="T:EnvDTE.CodeModelLanguageConstants" /> constant.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.LineNumber">
      <summary>Gets the line number in the source file that contains this stack frame. A read-only property.</summary>
      <returns>An unsigned integer value indicating the line number.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Locals">
      <summary>Gets a collection of expressions that represent the locals currently known by this frame.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Locals2(System.Boolean)">
      <summary>Gets a collection of expressions that represent the locals currently known by this frame. Similar to <see cref="P:EnvDTE90a.StackFrame2.Locals" />, but allows the caller to specify whether automatic evaluation of properties and implicit function calls should be performed.</summary>
      <returns>An <see cref="T:EnvDTE.Expressions" /> collection.</returns>
      <param name="AllowAutoFuncEval">Determines whether properties and implicit function calls should be automatically evaluated. true means that automatic evaluation will be performed. false means automatic evaluation will not be performed. This parameter affects the returned expressions and any children of those expressions.</param>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Module">
      <summary>Gets the module name for this stack frame. A module is a group of functions.</summary>
      <returns>A string representing a module name for this stack frame.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.Parent">
      <summary>Gets the immediate parent object of a <see cref="T:EnvDTE.StackFrame" /> object.</summary>
      <returns>A <see cref="T:EnvDTE.Thread" /> object.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.ReturnType">
      <summary>Gets a string that contains the return type for the stack property.</summary>
      <returns>A string that contains the return type for the stack property.</returns>
    </member>
    <member name="P:EnvDTE90a.StackFrame2.UserCode">
      <summary>Gets a value indicating whether the frame is user code, also known as "My Code." A read-only property.</summary>
      <returns>Returns true if the frame is user code; false if the frame is not user code. Always returns true for native code. </returns>
    </member>
  </members>
</doc>