<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>CppCodeProvider</name>
  </assembly>
  <members>
    <member name="T:Microsoft.VisualC.CodeDomTypeInfo">
      <summary>Encapsulates descriptions of a type.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(Microsoft.VisualC.CodeDomTypeInfo)">
      <summary>Creates a container for type information based on the specified <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" />.</summary>
      <param name="type">An instance of a <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" /> object used to model type information.</param>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(Microsoft.VisualC.CodeDomTypeInfo,System.Int32)">
      <summary>Creates a container for information about a given array based on the specified <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" /> and <see cref="T:System.Int32" />.</summary>
      <param name="type">An instance of a <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" /> object used to model type information.</param>
      <param name="rank">An <see cref="T:System.Int32" /> that represents the number of dimensions of the array.</param>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(System.CodeDom.CodeTypeDeclaration)">
      <summary>Creates a container for type information based on the specified <see cref="T:System.CodeDom.CodeTypeDeclaration" />.</summary>
      <param name="declaredType">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> used to model type information.</param>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.#ctor(System.Type)">
      <summary>Creates a container for type information based on the specified <see cref="T:System.Type" />.</summary>
      <param name="runtimeType">A <see cref="T:System.Type" /> used to model type information.</param>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.DeclaredType">
      <summary>Gets the type declaration.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeTypeDeclaration" />, which represents a type declaration for a class, structure, interface or enumeration.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.FullName">
      <summary>Gets the fully qualified name of the type.</summary>
      <returns>A <see cref="T:System.String" /> that indicates the fully qualified name of the type.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.GetTypeRelationship(Microsoft.VisualC.CodeDomTypeInfo)">
      <summary>Discovers the relationship between two types.</summary>
      <returns>A <see cref="T:Microsoft.VisualC.TypeRelationship" /> that indicates how the current type relates to the specified type.</returns>
      <param name="type">
        <see cref="T:Microsoft.VisualC.CodeDomTypeInfo" />
      </param>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsArray">
      <summary>Gets a value that indicates whether the type description defines an array.</summary>
      <returns>true if the type description defines is an array; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsBaseTypeValueType"></member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsInterface">
      <summary>Gets a value that indicates whether the type description defines an interface.</summary>
      <returns>true if the type description defines an interface; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.IsValueType">
      <summary>Gets a value that indicates whether the type description defines is a value type.</summary>
      <returns>true if the type description defines a value type; otherwise, false.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.Name">
      <summary>Gets the name of the type.</summary>
      <returns>A <see cref="T:System.String" /> that indicates the name of the type.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.Rank">
      <summary>Gets and sets the value that indicates the rank (number of dimensions) of an array type.</summary>
      <returns>An <see cref="T:System.Int32" /> that indicates the rank (number of dimensions) of an array type.</returns>
    </member>
    <member name="P:Microsoft.VisualC.CodeDomTypeInfo.RuntimeType">
      <summary>Gets the actual type of the object at runtime.</summary>
      <returns>The <see cref="T:System.Type" /> of the object at runtime.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CodeDomTypeInfo.ToString">
      <summary>Generates a string representation of the type information.</summary>
      <returns>A <see cref="T:System.String" /> that describes the type.</returns>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGenerator">
      <summary>Provides an example implementation of the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> interface and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGenerator.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualC.CppCodeGenerator" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGenerator7">
      <summary>Provides an example implementation of the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> interface.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGenerator7.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualC.CppCodeGenerator7" /> class.</summary>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGeneratorBase"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.#ctor"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.CreateEscapedIdentifier(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.CreateEscapedIdentifierInternal(System.String)">
      <param name="name"></param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.CreateValidIdentifier(System.String)">
      <param name="name"></param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.CurrentTypeString"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.Dispose"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.Dispose(System.Boolean)">
      <param name="disposing">Disposing.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateArrayCreateExpression(System.CodeDom.CodeArrayCreateExpression)">
      <param name="e">Array create expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateAttributes(System.CodeDom.CodeAttributeDeclarationCollection)">
      <param name="attributes">Attributes.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateAttributes(System.CodeDom.CodeAttributeDeclarationCollection,System.String)">
      <param name="attributes">Attributes.</param>
      <param name="prefix">Prefix.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCastExpression(System.CodeDom.CodeCastExpression)">
      <param name="e">Cast expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Compile unit.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Expression.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromField(System.CodeDom.CodeMemberField,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions,System.CodeDom.MemberAttributes)">
      <param name="e">Member field.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
      <param name="maAmbient">Member attributes.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Type member.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromMethod(System.CodeDom.CodeMemberMethod,System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Member method.</param>
      <param name="c">Type declaration.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Namespace.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Statement.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
      <param name="e">Type declaration.</param>
      <param name="w">Text writer.</param>
      <param name="o">Code generator options.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateCommentStatements(System.CodeDom.CodeCommentStatementCollection)">
      <param name="e">Comments.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateEntryPointMethod(System.CodeDom.CodeEntryPointMethod)">
      <param name="e">Entry point method.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateExpression(System.CodeDom.CodeExpression)">
      <param name="e">Expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateLinePragmaEnd(System.CodeDom.CodeLinePragma)">
      <param name="e">Line pragma.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateLinePragmaStart(System.CodeDom.CodeLinePragma)">
      <param name="e">Line pragma.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateMethodInvokeExpression(System.CodeDom.CodeMethodInvokeExpression)">
      <param name="e">Method invoke expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateMethodReferenceExpression(System.CodeDom.CodeMethodReferenceExpression)">
      <param name="e">Method reference expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GeneratePossibleBoxExpression(Microsoft.VisualC.CodeDomTypeInfo,System.CodeDom.CodeExpression)">
      <param name="typeLeft">Type.</param>
      <param name="right">Expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GeneratePossibleBoxExpression(System.CodeDom.CodeExpression,System.CodeDom.CodeExpression)">
      <param name="left">Left expression.</param>
      <param name="right">Right expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateProperty(System.CodeDom.CodeMemberProperty)">
      <param name="e">Member property.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateStatements(System.CodeDom.CodeStatementCollection)">
      <param name="s">Statements.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GenerateTypeOfExpression(System.CodeDom.CodeTypeOfExpression)">
      <param name="e">Typeof expression.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetBaseTypeOutput(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Type reference.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetBaseTypeReference(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Type reference.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetClassNameOutput(System.String)">
      <param name="s">A string.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetNewTempName"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetTypeOutput(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Type reference.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.GetTypeOutputInternal(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Type reference.</param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.Indent"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.IsCurrentInterface"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.IsInline"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.IsValidIdentifier(System.String)">
      <param name="value">A string.</param>
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.m_entrypoint"></member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.m_keywords"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.NullToken"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputArrayPostfix(System.Int32)">
      <param name="arrayRank">Array rank.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection)">
      <param name="attributes">Attribute declarations.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputAttributeDeclarations(System.CodeDom.CodeAttributeDeclarationCollection,System.Boolean)">
      <param name="attributes">Attribute declarations.</param>
      <param name="isProperty">Is property.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputClassHead(System.CodeDom.CodeTypeDeclaration)">
      <param name="e">Type declaration.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputClassHeadForwardDeclaration(System.CodeDom.CodeTypeDeclaration)">
      <param name="e">Type declaration.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputEventScopeModifier(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attributes.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputFunctionModifiers(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attributes.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputIdentifier(System.String)">
      <param name="s">Identifier.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputIndexerParameterList(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <param name="parameters">Parameters.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputKeyword(Microsoft.VisualC.CppCodeGeneratorBase.EKeyword)">
      <param name="e">Keyword.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputMemberAccessModifier(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attributes.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputMemberScopeModifier(System.CodeDom.MemberAttributes)">
      <param name="attributes">Attributes.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputParameters(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <param name="parameters">Parameters.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputStartingBrace"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputStatementsBlock(System.CodeDom.CodeStatementCollection)">
      <param name="statements">Statements.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputType(System.CodeDom.CodeTypeReference)">
      <param name="typeRef">Type reference.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputType(System.CodeDom.CodeTypeReference,Microsoft.VisualC.CodeDomTypeInfo)">
      <param name="typeRef">Type reference.</param>
      <param name="typeInfo">Type info.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.OutputTypeArguments(System.CodeDom.CodeTypeReferenceCollection)">
      <param name="types">Types.</param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.PassNumber"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.PopOutputStreams"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.PopulateKeywords"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.ProcessPossibleGlobalTypeName(System.String)">
      <param name="t">Type name.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.PushOutputStreams"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.QuoteSnippetString(System.String)">
      <param name="value">Snippet string.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.QuoteSnippetStringCStyle(System.String)">
      <param name="value">Snippet string.</param>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.ResetSymTabStack"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.SmartLineBreak"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.Supports(System.CodeDom.Compiler.GeneratorSupport)">
      <param name="support">Support.</param>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.SymTabStack"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.TempSuffix"></member>
    <member name="P:Microsoft.VisualC.CppCodeGeneratorBase.TypeResolutionService"></member>
    <member name="M:Microsoft.VisualC.CppCodeGeneratorBase.ValidateIdentifier(System.String)">
      <param name="value">Identifier.</param>
    </member>
    <member name="T:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword"></member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.GC">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.NEW">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.POINTER">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.VALUE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.SEALED">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.ABSTRACT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.DELEGATE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.EVENT">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.TYPEOF">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.INTERFACE">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.CppCodeGeneratorBase.EKeyword.FINALLY">
      <summary />
    </member>
    <member name="T:Microsoft.VisualC.CppCodeProvider">
      <summary>Provides a base class for a C/C++ implementation of <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />.</summary>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.#ctor">
      <summary>Initializes a new instance of the <see cref="T:Microsoft.VisualC.CppCodeProvider" /> class.</summary>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeProvider.CompileUnit">
      <summary>Gets and sets a C++ program graph.</summary>
      <returns>A <see cref="T:System.CodeDom.CodeCompileUnit" /> that represents a C++ program graph.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.CreateCompiler">
      <summary>Creates an instance of the C++ code compiler.</summary>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> that can be used for compilation of <see cref="N:System.CodeDom" /> based, C++ source code representations.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.CreateGenerator">
      <summary>Creates an instance of a C++ code generator.</summary>
      <returns>An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based, C++ source code representations.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.CreateParser">
      <summary>Not implemented.</summary>
      <exception cref="T:System.NotImplementedException"></exception>
    </member>
    <member name="P:Microsoft.VisualC.CppCodeProvider.FileExtension">
      <summary>Gets the file name extension for C++ source code files.</summary>
      <returns>A <see cref="T:System.String" /> that represents the file name extension for C++ source code files.</returns>
    </member>
    <member name="M:Microsoft.VisualC.CppCodeProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)"></member>
    <member name="T:Microsoft.VisualC.CppCodeProvider7"></member>
    <member name="M:Microsoft.VisualC.CppCodeProvider7.#ctor"></member>
    <member name="M:Microsoft.VisualC.CppCodeProvider7.CreateGenerator"></member>
    <member name="T:Microsoft.VisualC.SymbolTableStack">
      <summary>Represents a simple last-in-first-out (LIFO) non-generic collection of C++ code document object model (CodeDOM) objects.</summary>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.#ctor(System.CodeDom.CodeObject)">
      <param name="tree">
        <see cref="T:System.CodeDom.CodeObject" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.Add(System.CodeDom.CodeParameterDeclarationExpressionCollection)">
      <param name="arguments">
        <see cref="T:System.CodeDom.CodeParameterDeclarationExpressionCollection" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.Add(System.CodeDom.CodeStatementCollection)">
      <param name="statements">
        <see cref="T:System.CodeDom.CodeStatementCollection" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.Add(System.String,Microsoft.VisualC.CodeDomTypeInfo)">
      <param name="id"></param>
      <param name="type">CodeDomTypeInfo</param>
    </member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.CurrentType"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.CurrentTypeInfo"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.Errors"></member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateIndexer(System.CodeDom.CodeIndexerExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeIndexerExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateMethod(Microsoft.VisualC.CodeDomTypeInfo,System.String)">
      <param name="targetInfo">CodeDomTypeInfo</param>
      <param name="methodName">
        <see cref="T:System.String" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateMethod(Microsoft.VisualC.CodeDomTypeInfo,System.String,System.Int32)">
      <param name="targetInfo">CodeDomTypeInfo</param>
      <param name="methodName">
        <see cref="T:System.String" />
      </param>
      <param name="paramCount"></param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateMethod(System.CodeDom.CodeMethodInvokeExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeMethodInvokeExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateProperty(System.CodeDom.CodePropertyReferenceExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodePropertyReferenceExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateType(System.CodeDom.CodeExpression)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeExpression" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.EvaluateType(System.CodeDom.CodeTypeReference)">
      <param name="e">
        <see cref="T:System.CodeDom.CodeTypeReference" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.ExitScope"></member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.GetTypeFromName(System.String)"></member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.SetCurrentType(System.CodeDom.CodeNamespace)">
      <param name="ns">
        <see cref="T:System.CodeDom.CodeNamespace" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.SetCurrentType(System.CodeDom.CodeTypeDeclaration)">
      <param name="type">
        <see cref="T:System.CodeDom.CodeTypeDeclaration" />
      </param>
    </member>
    <member name="M:Microsoft.VisualC.SymbolTableStack.SetScope"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.TypeResolutionService"></member>
    <member name="P:Microsoft.VisualC.SymbolTableStack.Warnings"></member>
    <member name="T:Microsoft.VisualC.TypeRelationship"></member>
    <member name="F:Microsoft.VisualC.TypeRelationship.Unknown">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.DerivedFrom">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.SameType">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.MaybeBoxNeeded">
      <summary />
    </member>
    <member name="F:Microsoft.VisualC.TypeRelationship.BoxNeeded">
      <summary />
    </member>
  </members>
</doc>